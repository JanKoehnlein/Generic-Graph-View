/*
* generated by Xtext
*/

package org.eclipse.xtext.graphview.map.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class GraphViewMappingGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class DiagramMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DiagramMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cDiagramKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeGuardAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cTypeGuardJvmTypeReferenceParserRuleCall_4_0 = (RuleCall)cTypeGuardAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMappingsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMappingsAbstractExpressionMappingParserRuleCall_6_0 = (RuleCall)cMappingsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cUnlessKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cUnlessConditionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cUnlessConditionXExpressionParserRuleCall_8_1_0 = (RuleCall)cUnlessConditionAssignment_8_1.eContents().get(0);
		
		//DiagramMapping:
		//	imports+=Import* "diagram" name=QualifiedName "type" typeGuard=JvmTypeReference "{"
		//	mappings+=AbstractExpressionMapping* "}" ("unless" unlessCondition=XExpression)?;
		public ParserRule getRule() { return rule; }

		//imports+=Import* "diagram" name=QualifiedName "type" typeGuard=JvmTypeReference "{" mappings+=AbstractExpressionMapping*
		//"}" ("unless" unlessCondition=XExpression)?
		public Group getGroup() { return cGroup; }

		//imports+=Import*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//Import
		public RuleCall getImportsImportParserRuleCall_0_0() { return cImportsImportParserRuleCall_0_0; }

		//"diagram"
		public Keyword getDiagramKeyword_1() { return cDiagramKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//"type"
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }

		//typeGuard=JvmTypeReference
		public Assignment getTypeGuardAssignment_4() { return cTypeGuardAssignment_4; }

		//JvmTypeReference
		public RuleCall getTypeGuardJvmTypeReferenceParserRuleCall_4_0() { return cTypeGuardJvmTypeReferenceParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//mappings+=AbstractExpressionMapping*
		public Assignment getMappingsAssignment_6() { return cMappingsAssignment_6; }

		//AbstractExpressionMapping
		public RuleCall getMappingsAbstractExpressionMappingParserRuleCall_6_0() { return cMappingsAbstractExpressionMappingParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//("unless" unlessCondition=XExpression)?
		public Group getGroup_8() { return cGroup_8; }

		//"unless"
		public Keyword getUnlessKeyword_8_0() { return cUnlessKeyword_8_0; }

		//unlessCondition=XExpression
		public Assignment getUnlessConditionAssignment_8_1() { return cUnlessConditionAssignment_8_1; }

		//XExpression
		public RuleCall getUnlessConditionXExpressionParserRuleCall_8_1_0() { return cUnlessConditionXExpressionParserRuleCall_8_1_0; }
	}

	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	"import" importedNamespace=QualifiedNameWithWildcard;
		public ParserRule getRule() { return rule; }

		//"import" importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }

		//"import"
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }

		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}

	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName ("." "*")?;
		public ParserRule getRule() { return rule; }

		//QualifiedName ("." "*")?
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//("." "*")?
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class AbstractExpressionMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AbstractExpressionMapping");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNodeMappingParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLabelMappingParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEdgeMappingParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMappingCallParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//AbstractExpressionMapping:
		//	NodeMapping | LabelMapping | EdgeMapping | MappingCall;
		public ParserRule getRule() { return rule; }

		//NodeMapping | LabelMapping | EdgeMapping | MappingCall
		public Alternatives getAlternatives() { return cAlternatives; }

		//NodeMapping
		public RuleCall getNodeMappingParserRuleCall_0() { return cNodeMappingParserRuleCall_0; }

		//LabelMapping
		public RuleCall getLabelMappingParserRuleCall_1() { return cLabelMappingParserRuleCall_1; }

		//EdgeMapping
		public RuleCall getEdgeMappingParserRuleCall_2() { return cEdgeMappingParserRuleCall_2; }

		//MappingCall
		public RuleCall getMappingCallParserRuleCall_3() { return cMappingCallParserRuleCall_3; }
	}

	public class NodeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NodeMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMultiAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMultiEachKeyword_3_0 = (Keyword)cMultiAssignment_3.eContents().get(0);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cMappingsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cMappingsAbstractExpressionMappingParserRuleCall_6_0 = (RuleCall)cMappingsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cUnlessKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cUnlessConditionAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cUnlessConditionXExpressionParserRuleCall_8_1_0 = (RuleCall)cUnlessConditionAssignment_8_1.eContents().get(0);
		
		//NodeMapping:
		//	"node" name=ID "for" multi?="each"? expression=XExpression "{" mappings+=AbstractExpressionMapping* "}" ("unless"
		//	unlessCondition=XExpression)?;
		public ParserRule getRule() { return rule; }

		//"node" name=ID "for" multi?="each"? expression=XExpression "{" mappings+=AbstractExpressionMapping* "}" ("unless"
		//unlessCondition=XExpression)?
		public Group getGroup() { return cGroup; }

		//"node"
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//multi?="each"?
		public Assignment getMultiAssignment_3() { return cMultiAssignment_3; }

		//"each"
		public Keyword getMultiEachKeyword_3_0() { return cMultiEachKeyword_3_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//mappings+=AbstractExpressionMapping*
		public Assignment getMappingsAssignment_6() { return cMappingsAssignment_6; }

		//AbstractExpressionMapping
		public RuleCall getMappingsAbstractExpressionMappingParserRuleCall_6_0() { return cMappingsAbstractExpressionMappingParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//("unless" unlessCondition=XExpression)?
		public Group getGroup_8() { return cGroup_8; }

		//"unless"
		public Keyword getUnlessKeyword_8_0() { return cUnlessKeyword_8_0; }

		//unlessCondition=XExpression
		public Assignment getUnlessConditionAssignment_8_1() { return cUnlessConditionAssignment_8_1; }

		//XExpression
		public RuleCall getUnlessConditionXExpressionParserRuleCall_8_1_0() { return cUnlessConditionXExpressionParserRuleCall_8_1_0; }
	}

	public class LabelMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LabelMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLabelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMultiAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMultiEachKeyword_3_0 = (Keyword)cMultiAssignment_3.eContents().get(0);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUnlessKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUnlessConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUnlessConditionXExpressionParserRuleCall_5_1_0 = (RuleCall)cUnlessConditionAssignment_5_1.eContents().get(0);
		
		//LabelMapping:
		//	"label" name=ID "for" multi?="each"? expression=XExpression ("unless" unlessCondition=XExpression)?;
		public ParserRule getRule() { return rule; }

		//"label" name=ID "for" multi?="each"? expression=XExpression ("unless" unlessCondition=XExpression)?
		public Group getGroup() { return cGroup; }

		//"label"
		public Keyword getLabelKeyword_0() { return cLabelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//multi?="each"?
		public Assignment getMultiAssignment_3() { return cMultiAssignment_3; }

		//"each"
		public Keyword getMultiEachKeyword_3_0() { return cMultiEachKeyword_3_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }

		//("unless" unlessCondition=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"unless"
		public Keyword getUnlessKeyword_5_0() { return cUnlessKeyword_5_0; }

		//unlessCondition=XExpression
		public Assignment getUnlessConditionAssignment_5_1() { return cUnlessConditionAssignment_5_1; }

		//XExpression
		public RuleCall getUnlessConditionXExpressionParserRuleCall_5_1_0() { return cUnlessConditionXExpressionParserRuleCall_5_1_0; }
	}

	public class EdgeMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEdgeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMultiAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMultiEachKeyword_3_0 = (Keyword)cMultiAssignment_3.eContents().get(0);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cSourceMappingAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cSourceMappingEdgeEndMappingParserRuleCall_6_0 = (RuleCall)cSourceMappingAssignment_6.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cTargetMappingAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cTargetMappingEdgeEndMappingParserRuleCall_8_0 = (RuleCall)cTargetMappingAssignment_8.eContents().get(0);
		private final Assignment cMappingsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cMappingsLabelMappingParserRuleCall_9_0 = (RuleCall)cMappingsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cUnlessKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cUnlessConditionAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cUnlessConditionXExpressionParserRuleCall_11_1_0 = (RuleCall)cUnlessConditionAssignment_11_1.eContents().get(0);
		
		//EdgeMapping:
		//	"edge" name=ID "for" multi?="each"? expression=XExpression "{" sourceMapping=EdgeEndMapping? "->"
		//	targetMapping=EdgeEndMapping? mappings+=LabelMapping* "}" ("unless" unlessCondition=XExpression)?;
		public ParserRule getRule() { return rule; }

		//"edge" name=ID "for" multi?="each"? expression=XExpression "{" sourceMapping=EdgeEndMapping? "->"
		//targetMapping=EdgeEndMapping? mappings+=LabelMapping* "}" ("unless" unlessCondition=XExpression)?
		public Group getGroup() { return cGroup; }

		//"edge"
		public Keyword getEdgeKeyword_0() { return cEdgeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//multi?="each"?
		public Assignment getMultiAssignment_3() { return cMultiAssignment_3; }

		//"each"
		public Keyword getMultiEachKeyword_3_0() { return cMultiEachKeyword_3_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_5() { return cLeftCurlyBracketKeyword_5; }

		//sourceMapping=EdgeEndMapping?
		public Assignment getSourceMappingAssignment_6() { return cSourceMappingAssignment_6; }

		//EdgeEndMapping
		public RuleCall getSourceMappingEdgeEndMappingParserRuleCall_6_0() { return cSourceMappingEdgeEndMappingParserRuleCall_6_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_7() { return cHyphenMinusGreaterThanSignKeyword_7; }

		//targetMapping=EdgeEndMapping?
		public Assignment getTargetMappingAssignment_8() { return cTargetMappingAssignment_8; }

		//EdgeEndMapping
		public RuleCall getTargetMappingEdgeEndMappingParserRuleCall_8_0() { return cTargetMappingEdgeEndMappingParserRuleCall_8_0; }

		//mappings+=LabelMapping*
		public Assignment getMappingsAssignment_9() { return cMappingsAssignment_9; }

		//LabelMapping
		public RuleCall getMappingsLabelMappingParserRuleCall_9_0() { return cMappingsLabelMappingParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }

		//("unless" unlessCondition=XExpression)?
		public Group getGroup_11() { return cGroup_11; }

		//"unless"
		public Keyword getUnlessKeyword_11_0() { return cUnlessKeyword_11_0; }

		//unlessCondition=XExpression
		public Assignment getUnlessConditionAssignment_11_1() { return cUnlessConditionAssignment_11_1; }

		//XExpression
		public RuleCall getUnlessConditionXExpressionParserRuleCall_11_1_0() { return cUnlessConditionXExpressionParserRuleCall_11_1_0; }
	}

	public class EdgeEndMappingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EdgeEndMapping");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRefKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cCallAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cCallCallKeyword_0_1_0 = (Keyword)cCallAssignment_0_1.eContents().get(0);
		private final Assignment cReferencedMappingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferencedMappingAbstractMappingDefinitionCrossReference_1_0 = (CrossReference)cReferencedMappingAssignment_1.eContents().get(0);
		private final RuleCall cReferencedMappingAbstractMappingDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cReferencedMappingAbstractMappingDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionXExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//EdgeEndMapping:
		//	("ref" | call?="call") referencedMapping=[AbstractMappingDefinition] "for" expression=XExpression;
		public ParserRule getRule() { return rule; }

		//("ref" | call?="call") referencedMapping=[AbstractMappingDefinition] "for" expression=XExpression
		public Group getGroup() { return cGroup; }

		//"ref" | call?="call"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"ref"
		public Keyword getRefKeyword_0_0() { return cRefKeyword_0_0; }

		//call?="call"
		public Assignment getCallAssignment_0_1() { return cCallAssignment_0_1; }

		//"call"
		public Keyword getCallCallKeyword_0_1_0() { return cCallCallKeyword_0_1_0; }

		//referencedMapping=[AbstractMappingDefinition]
		public Assignment getReferencedMappingAssignment_1() { return cReferencedMappingAssignment_1; }

		//[AbstractMappingDefinition]
		public CrossReference getReferencedMappingAbstractMappingDefinitionCrossReference_1_0() { return cReferencedMappingAbstractMappingDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getReferencedMappingAbstractMappingDefinitionIDTerminalRuleCall_1_0_1() { return cReferencedMappingAbstractMappingDefinitionIDTerminalRuleCall_1_0_1; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//expression=XExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_3_0() { return cExpressionXExpressionParserRuleCall_3_0; }
	}

	public class MappingCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MappingCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCallKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cReferencedMappingAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cReferencedMappingAbstractMappingDefinitionCrossReference_1_0 = (CrossReference)cReferencedMappingAssignment_1.eContents().get(0);
		private final RuleCall cReferencedMappingAbstractMappingDefinitionIDTerminalRuleCall_1_0_1 = (RuleCall)cReferencedMappingAbstractMappingDefinitionCrossReference_1_0.eContents().get(1);
		private final Keyword cForKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cMultiAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cMultiEachKeyword_3_0 = (Keyword)cMultiAssignment_3.eContents().get(0);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionXExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUnlessKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUnlessConditionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUnlessConditionXExpressionParserRuleCall_5_1_0 = (RuleCall)cUnlessConditionAssignment_5_1.eContents().get(0);
		
		//MappingCall:
		//	"call" referencedMapping=[AbstractMappingDefinition] "for" multi?="each"? expression=XExpression ("unless"
		//	unlessCondition=XExpression)?;
		public ParserRule getRule() { return rule; }

		//"call" referencedMapping=[AbstractMappingDefinition] "for" multi?="each"? expression=XExpression ("unless"
		//unlessCondition=XExpression)?
		public Group getGroup() { return cGroup; }

		//"call"
		public Keyword getCallKeyword_0() { return cCallKeyword_0; }

		//referencedMapping=[AbstractMappingDefinition]
		public Assignment getReferencedMappingAssignment_1() { return cReferencedMappingAssignment_1; }

		//[AbstractMappingDefinition]
		public CrossReference getReferencedMappingAbstractMappingDefinitionCrossReference_1_0() { return cReferencedMappingAbstractMappingDefinitionCrossReference_1_0; }

		//ID
		public RuleCall getReferencedMappingAbstractMappingDefinitionIDTerminalRuleCall_1_0_1() { return cReferencedMappingAbstractMappingDefinitionIDTerminalRuleCall_1_0_1; }

		//"for"
		public Keyword getForKeyword_2() { return cForKeyword_2; }

		//multi?="each"?
		public Assignment getMultiAssignment_3() { return cMultiAssignment_3; }

		//"each"
		public Keyword getMultiEachKeyword_3_0() { return cMultiEachKeyword_3_0; }

		//expression=XExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//XExpression
		public RuleCall getExpressionXExpressionParserRuleCall_4_0() { return cExpressionXExpressionParserRuleCall_4_0; }

		//("unless" unlessCondition=XExpression)?
		public Group getGroup_5() { return cGroup_5; }

		//"unless"
		public Keyword getUnlessKeyword_5_0() { return cUnlessKeyword_5_0; }

		//unlessCondition=XExpression
		public Assignment getUnlessConditionAssignment_5_1() { return cUnlessConditionAssignment_5_1; }

		//XExpression
		public RuleCall getUnlessConditionXExpressionParserRuleCall_5_1_0() { return cUnlessConditionXExpressionParserRuleCall_5_1_0; }
	}
	
	
	private DiagramMappingElements pDiagramMapping;
	private ImportElements pImport;
	private QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private AbstractExpressionMappingElements pAbstractExpressionMapping;
	private NodeMappingElements pNodeMapping;
	private LabelMappingElements pLabelMapping;
	private EdgeMappingElements pEdgeMapping;
	private EdgeEndMappingElements pEdgeEndMapping;
	private MappingCallElements pMappingCall;
	
	private final GrammarProvider grammarProvider;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public GraphViewMappingGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammarProvider = grammarProvider;
		this.gaXbase = gaXbase;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//DiagramMapping:
	//	imports+=Import* "diagram" name=QualifiedName "type" typeGuard=JvmTypeReference "{"
	//	mappings+=AbstractExpressionMapping* "}" ("unless" unlessCondition=XExpression)?;
	public DiagramMappingElements getDiagramMappingAccess() {
		return (pDiagramMapping != null) ? pDiagramMapping : (pDiagramMapping = new DiagramMappingElements());
	}
	
	public ParserRule getDiagramMappingRule() {
		return getDiagramMappingAccess().getRule();
	}

	//Import:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return (pImport != null) ? pImport : (pImport = new ImportElements());
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ("." "*")?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return (pQualifiedNameWithWildcard != null) ? pQualifiedNameWithWildcard : (pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements());
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//AbstractExpressionMapping:
	//	NodeMapping | LabelMapping | EdgeMapping | MappingCall;
	public AbstractExpressionMappingElements getAbstractExpressionMappingAccess() {
		return (pAbstractExpressionMapping != null) ? pAbstractExpressionMapping : (pAbstractExpressionMapping = new AbstractExpressionMappingElements());
	}
	
	public ParserRule getAbstractExpressionMappingRule() {
		return getAbstractExpressionMappingAccess().getRule();
	}

	//NodeMapping:
	//	"node" name=ID "for" multi?="each"? expression=XExpression "{" mappings+=AbstractExpressionMapping* "}" ("unless"
	//	unlessCondition=XExpression)?;
	public NodeMappingElements getNodeMappingAccess() {
		return (pNodeMapping != null) ? pNodeMapping : (pNodeMapping = new NodeMappingElements());
	}
	
	public ParserRule getNodeMappingRule() {
		return getNodeMappingAccess().getRule();
	}

	//LabelMapping:
	//	"label" name=ID "for" multi?="each"? expression=XExpression ("unless" unlessCondition=XExpression)?;
	public LabelMappingElements getLabelMappingAccess() {
		return (pLabelMapping != null) ? pLabelMapping : (pLabelMapping = new LabelMappingElements());
	}
	
	public ParserRule getLabelMappingRule() {
		return getLabelMappingAccess().getRule();
	}

	//EdgeMapping:
	//	"edge" name=ID "for" multi?="each"? expression=XExpression "{" sourceMapping=EdgeEndMapping? "->"
	//	targetMapping=EdgeEndMapping? mappings+=LabelMapping* "}" ("unless" unlessCondition=XExpression)?;
	public EdgeMappingElements getEdgeMappingAccess() {
		return (pEdgeMapping != null) ? pEdgeMapping : (pEdgeMapping = new EdgeMappingElements());
	}
	
	public ParserRule getEdgeMappingRule() {
		return getEdgeMappingAccess().getRule();
	}

	//EdgeEndMapping:
	//	("ref" | call?="call") referencedMapping=[AbstractMappingDefinition] "for" expression=XExpression;
	public EdgeEndMappingElements getEdgeEndMappingAccess() {
		return (pEdgeEndMapping != null) ? pEdgeEndMapping : (pEdgeEndMapping = new EdgeEndMappingElements());
	}
	
	public ParserRule getEdgeEndMappingRule() {
		return getEdgeEndMappingAccess().getRule();
	}

	//MappingCall:
	//	"call" referencedMapping=[AbstractMappingDefinition] "for" multi?="each"? expression=XExpression ("unless"
	//	unlessCondition=XExpression)?;
	public MappingCallElements getMappingCallAccess() {
		return (pMappingCall != null) ? pMappingCall : (pMappingCall = new MappingCallElements());
	}
	
	public ParserRule getMappingCallRule() {
		return getMappingCallAccess().getRule();
	}

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof")
	//	type=[types::JvmType|QualifiedName] | => ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpCompare]) rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | "..";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XIntLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	{XClosure} "[" (formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)? "|"
	//	expression=XExpression "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (formalParameters+=JvmFormalParameter ("," formalParameters+=JvmFormalParameter)*)? "|")
	//	expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (localVarName=ValidID ":")? switch=XExpression "{" cases+=XCasePart+ ("default" ":"
	//	default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? "("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")";
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XIntLiteral returns XExpression:
	//	{XIntLiteral} value=INT;
	public XbaseGrammarAccess.XIntLiteralElements getXIntLiteralAccess() {
		return gaXbase.getXIntLiteralAccess();
	}
	
	public ParserRule getXIntLiteralRule() {
		return getXIntLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=JvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//QualifiedName:
	//	ValidID ("." ValidID)*;
	public XbaseGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaXbase.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//JvmTypeReference returns JvmParameterizedTypeReference:
	//	JvmParameterizedTypeReference | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)* ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaXbase.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
